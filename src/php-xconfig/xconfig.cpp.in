#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
extern "C" {
#include "php.h"
#include "Zend/zend_exceptions.h"
}

#include <pthread.h>

#include <xconfig.h>
#include <xconfig_connection.h>

using xconfig::XConfig;
using xconfig::XConfigNode;
using xconfig::XConfigNotFound;
using xconfig::XConfigNotConnected;
using xconfig::UnixConnectionPool;
using xconfig::UnixConnection;
using std::string;
using std::vector;
 
#define PHP_XCONFIG_VERSION "1.0"
#define PHP_XCONFIG_EXTNAME "xconfig"

zend_object_handlers xconfig_object_handlers;
zend_object_handlers xconfignode_object_handlers;

#define CONSTANT_TYPE_DEFAULT_SOCKET "DEFAULT_SOCKET"
#define CONSTANT_TYPE_NULL "TYPE_NULL"
#define CONSTANT_TYPE_STRING "TYPE_STRING"
#define CONSTANT_TYPE_BOOLEAN "TYPE_BOOLEAN"
#define CONSTANT_TYPE_INTEGER "TYPE_INTEGER"
#define CONSTANT_TYPE_FLOAT "TYPE_FLOAT"
#define CONSTANT_TYPE_MAP "TYPE_MAP"
#define CONSTANT_TYPE_SEQUENCE "TYPE_SEQUENCE"

struct xconfig_object {
	XConfig *xconfig;
	zend_object std;
};

struct xconfignode_object {
	XConfig *xconfig;
	XConfigNode xconfignode;
	zend_object std;
};

void xconfig_free_storage(void *object TSRMLS_DC)
{
	xconfig_object *obj = (xconfig_object *)object;
	delete obj->xconfig; 

	zend_hash_destroy(obj->std.properties);
	FREE_HASHTABLE(obj->std.properties);

	efree(obj);
}

void xconfignode_free_storage(void *object TSRMLS_DC)
{
	xconfignode_object *obj = (xconfignode_object *)object;

	zend_hash_destroy(obj->std.properties);
	FREE_HASHTABLE(obj->std.properties);

	efree(obj);
}

zend_object * xconfig_create_handler(zend_class_entry *type TSRMLS_DC)
{
	xconfig_object *obj = (xconfig_object *) ecalloc(1,
            sizeof(xconfig_object) +
            zend_object_properties_size(type));
    zend_object_std_init(&obj->std, type TSRMLS_CC);

    // TODO Check this
	ALLOC_HASHTABLE(obj->std.properties);
	zend_hash_init(obj->std.properties, 0, NULL, ZVAL_PTR_DTOR, 0);

    xconfig_object_handlers.offset = XtOffsetOf(struct xconfig_object, std);
    xconfig_object_handlers.free_obj = (zend_object_free_obj_t) xconfig_free_storage;
    obj->std.handlers = &xconfig_object_handlers;

    return &obj->std;
}
 
zend_object * xconfignode_create_handler(zend_class_entry *type TSRMLS_DC)
{
    xconfignode_object *obj = (xconfignode_object *) ecalloc(1,
             sizeof(xconfignode_object) +
             zend_object_properties_size(type));
    zend_object_std_init(&obj->std, type TSRMLS_CC);

    // TODO Check this
	ALLOC_HASHTABLE(obj->std.properties);
	zend_hash_init(obj->std.properties, 0, NULL, ZVAL_PTR_DTOR, 0);

    xconfignode_object_handlers.offset = XtOffsetOf(struct xconfignode_object, std);
    xconfig_object_handlers.free_obj = (zend_object_free_obj_t) xconfignode_free_storage;
    obj->std.handlers = &xconfignode_object_handlers;

	return &obj->std;
}
 
extern zend_module_entry xconfig_module_entry;

zend_class_entry *xconfig_ce;
zend_class_entry *xconfignode_ce;
zend_class_entry *xconfig_exception_ce;
zend_class_entry *xconfig_wrongtypeexception_ce;
zend_class_entry *xconfig_notfoundexception_ce;
zend_class_entry *xconfig_notconnectedxception_ce;

UnixConnectionPool* xconfig_pool;


static inline struct xconfig_object * php_xconfig_object_fetch_object(zend_object *obj) {
    return (struct xconfig_object *)((char *)obj - XtOffsetOf(struct xconfig_object, std));
}

static inline struct xconfignode_object * php_xconfignode_object_fetch_object(zend_object *obj) {
    return (struct xconfignode_object *)((char *)obj - XtOffsetOf(struct xconfignode_object, std));
}
 
#define Z_XCONFIG_OBJ_P(zv) php_xconfig_object_fetch_object(Z_OBJ_P(zv));
#define Z_XCONFIGNODE_OBJ_P(zv) php_xconfignode_object_fetch_object(Z_OBJ_P(zv));

PHP_METHOD(XConfig, __construct)
{
	char* path;
	char* socket = NULL;
	int path_len, socket_len;
	bool autoreload = true;

	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, const_cast<char*>("s|sb"), &path, &path_len, &socket, &socket_len, &autoreload) == FAILURE) {
		RETURN_NULL();
	}

	xconfig_object *obj = Z_XCONFIG_OBJ_P(getThis());

	try {
		if (!xconfig_pool)
			xconfig_pool = new UnixConnectionPool;
		if (socket) {
			obj->xconfig = new XConfig(xconfig_pool->getConnection(string(path, path_len), string(socket, socket_len)), autoreload);
		} else {
			obj->xconfig = new XConfig(xconfig_pool->getConnection(string(path, path_len)), autoreload);
		}
	} catch (const XConfigNotConnected& e) {
		zend_throw_exception_ex(xconfig_notconnectedxception_ce, 0 TSRMLS_CC, (char*)"XConfig not connected");	
	}
}

PHP_METHOD(XConfig, close)
{
	xconfig_object *obj = Z_XCONFIG_OBJ_P(getThis());
	obj->xconfig->close();
}

PHP_METHOD(XConfig, reload)
{
	xconfig_object *obj = Z_XCONFIG_OBJ_P(getThis());
	obj->xconfig->reload();
}

static XConfigNode getNodeFromZVal(XConfig* xc, zval z_key, bool nothrow = false) {
	XConfigNode node;
	try {
		switch (Z_TYPE(z_key)) {
			case IS_OBJECT: {
				if (instanceof_function(Z_OBJCE(z_key), xconfignode_ce TSRMLS_CC)) {
	                xconfignode_object *obj = Z_XCONFIGNODE_OBJ_P(&z_key);
					if (obj->xconfig  == xc) {
						node = obj->xconfignode;
					} else {
						zend_throw_exception_ex(xconfig_wrongtypeexception_ce, 0 TSRMLS_CC, (char*)"XConfigNode object belongs to another XConfig instance");	
					}
				} else {
					zend_throw_exception_ex(xconfig_wrongtypeexception_ce, 0 TSRMLS_CC, (char*)"Expected XConfigNode object");
				}
				break;
			}
			case IS_STRING:
				node = xc->getNodeNoThrow(string(Z_STRVAL(z_key), Z_STRLEN(z_key)));
				break;
			case IS_ARRAY: {
				HashTable *ht = HASH_OF(&z_key); // TODO
                ulong num_key;
                zend_string *key;
				zval *data;

				vector<string> keys(zend_hash_num_elements(ht));
                
                ZEND_HASH_FOREACH_KEY_VAL(ht, num_key, key, data) {
                    if (key) { //HASH_KEY_IS_STRING
						keys[num_key] = string(Z_STRVAL_P(data), Z_STRLEN_P(data));
                    } else {
   						zval varcopy;
						varcopy = *data;
						zval_copy_ctor(&varcopy);
						convert_to_string(&varcopy);
						keys[num_key] = string(Z_STRVAL(varcopy), Z_STRLEN(varcopy));
						zval_dtor(&varcopy);
                    }
                } ZEND_HASH_FOREACH_END();

				node = xc->getNodeNoThrow(keys);
				break;
			}
			default:
				zend_throw_exception_ex(xconfig_wrongtypeexception_ce, 0 TSRMLS_CC, (char*)"Wrong type for key");	
				break;
		}
	} catch (const XConfigNotConnected& e) {
		zend_throw_exception_ex(xconfig_notfoundexception_ce, 0 TSRMLS_CC, (char*)"XConfig not connected");	
	}
	if (!node && !nothrow) {
		zend_throw_exception_ex(xconfig_notfoundexception_ce, 0 TSRMLS_CC, (char*)"Key not found");	
	}
	return node;
}

PHP_METHOD(XConfig, exists)
{
	zval *z_key;

	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "z", &z_key) == FAILURE) {
		RETURN_NULL();
	}
	xconfig_object *obj = Z_XCONFIG_OBJ_P(getThis());
	XConfigNode node = getNodeFromZVal(obj->xconfig, *z_key, true);
	RETURN_BOOL((bool) node);
}

PHP_METHOD(XConfig, getType)
{
	zval *z_key;

	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "z", &z_key) == FAILURE) {
		RETURN_NULL();
	}
	xconfig_object *obj = Z_XCONFIG_OBJ_P(getThis());
	XConfigNode node = getNodeFromZVal(obj->xconfig, *z_key);
	if (!node)
		return;
	RETURN_LONG(obj->xconfig->getType(node));
}

PHP_METHOD(XConfig, getMtime)
{
	zval *z_key;

	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "z", &z_key) == FAILURE) {
		RETURN_NULL();
	}
	xconfig_object *obj = Z_XCONFIG_OBJ_P(getThis());
	XConfigNode node = getNodeFromZVal(obj->xconfig, *z_key);
	if (!node)
		return;

	struct timespec ts = obj->xconfig->getMtime(node);

	array_init(return_value);
	add_next_index_long(return_value, ts.tv_sec);
	add_next_index_long(return_value, ts.tv_nsec);
}

static void getValueToZval(XConfig* xc, const XConfigNode& node, zval *z)
{
	switch (xc->getType(node)) {
		case xconfig::TYPE_NULL:
			ZVAL_NULL(z);
			return;
		case xconfig::TYPE_BOOLEAN:
			ZVAL_BOOL(z, xc->getBool(node));
			return;
		case xconfig::TYPE_INTEGER:
			ZVAL_LONG(z, xc->getInt(node));
			return;
		case xconfig::TYPE_FLOAT:
			ZVAL_DOUBLE(z, xc->getFloat(node));
			return;
		case xconfig::TYPE_STRING:
		{
			string val = xc->getString(node);
			ZVAL_STRINGL(z, val.c_str(), val.length());
			return;
		}
		case xconfig::TYPE_SEQUENCE: {
			vector<XConfigNode> children = xc->getChildren(node);
			array_init(z);
			for (vector<XConfigNode>::const_iterator it = children.begin(); it != children.end(); ++it) {
				zval item;
				getValueToZval(xc, *it, &item);
				add_next_index_zval(z, &item);
			}
			return;
		}
		case xconfig::TYPE_MAP: {
			vector<XConfigNode> children = xc->getChildren(node);
			array_init(z);
			for (vector<XConfigNode>::const_iterator it = children.begin(); it != children.end(); ++it) {
				zval item;
				string name(xc->getName(*it));
				getValueToZval(xc, *it, &item);
				if (name.length())
					add_assoc_zval_ex(z, name.c_str(), name.length() + 1, &item);
				else
					add_assoc_zval_ex(z, "", 0, &item);
			}
			return;
		}
		default:
			zend_throw_exception_ex(xconfig_wrongtypeexception_ce, 0 TSRMLS_CC, (char*)"Wrong Type");	
	}
}

PHP_METHOD(XConfig, getValue)
{
	zval *z_key;
	zval z_ret;

	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "z", &z_key) == FAILURE) {
		RETURN_NULL();
	}
	xconfig_object *obj = Z_XCONFIG_OBJ_P(getThis());
	XConfigNode node = getNodeFromZVal(obj->xconfig, *z_key);
	if (!node)
		return;
	getValueToZval(obj->xconfig, node, &z_ret);
	RETURN_ZVAL(&z_ret, false, true);
}

PHP_METHOD(XConfig, isScalar)
{
	zval *z_key;

	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "z", &z_key) == FAILURE) {
		RETURN_NULL();
	}
	xconfig_object *obj = Z_XCONFIG_OBJ_P(getThis());
	XConfigNode node = getNodeFromZVal(obj->xconfig, *z_key);
	if (!node)
		return;

	RETURN_BOOL(obj->xconfig->isScalar(node));
}

PHP_METHOD(XConfig, isMap)
{
	zval *z_key;

	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "z", &z_key) == FAILURE) {
		RETURN_NULL();
	}
	xconfig_object *obj = Z_XCONFIG_OBJ_P(getThis());
	XConfigNode node = getNodeFromZVal(obj->xconfig, *z_key);
	if (!node)
		return;

	RETURN_BOOL(obj->xconfig->isMap(node));
}

PHP_METHOD(XConfig, isSequence)
{
	zval *z_key;

	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "z", &z_key) == FAILURE) {
		RETURN_NULL();
	}
	xconfig_object *obj = Z_XCONFIG_OBJ_P(getThis());
	XConfigNode node = getNodeFromZVal(obj->xconfig, *z_key);
	if (!node)
		return;

	RETURN_BOOL(obj->xconfig->isSequence(node));
}

PHP_METHOD(XConfig, getCount)
{
	zval *z_key;

	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "z", &z_key) == FAILURE) {
		RETURN_NULL();
	}
	xconfig_object *obj = Z_XCONFIG_OBJ_P(getThis());
	XConfigNode node = getNodeFromZVal(obj->xconfig, *z_key);
	if (!node)
		return;

	RETURN_LONG(obj->xconfig->getCount(node));
}

PHP_METHOD(XConfig, getMapKeys)
{
	zval *z_key;

	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "z", &z_key) == FAILURE) {
		RETURN_NULL();
	}
	xconfig_object *obj = Z_XCONFIG_OBJ_P(getThis());
	XConfigNode node = getNodeFromZVal(obj->xconfig, *z_key);
	if (!node)
		return;
	XConfig* xc = obj->xconfig;

	vector<XConfigNode> children = xc->getChildren(node);
	array_init(return_value);
	for (vector<XConfigNode>::const_iterator it = children.begin(); it != children.end(); ++it) {
		string name(xc->getName(*it));
		add_next_index_stringl(return_value, name.c_str(), name.length());
	}
}

PHP_METHOD(XConfig, getNode)
{
	zval *z_key;

	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "z", &z_key) == FAILURE) {
		RETURN_NULL();
	}
	xconfig_object *obj = Z_XCONFIG_OBJ_P(getThis());
	XConfigNode node = getNodeFromZVal(obj->xconfig, *z_key);
	if (!node)
		return;
	object_init_ex(return_value, xconfignode_ce);

	xconfignode_object *node_obj = Z_XCONFIGNODE_OBJ_P(return_value);
	node_obj->xconfig = obj->xconfig;
	node_obj->xconfignode = node;
}

PHP_METHOD(XConfig, getNodeNoThrow)
{
	zval *z_key;

	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "z", &z_key) == FAILURE) {
		RETURN_NULL();
	}
	xconfig_object *obj = Z_XCONFIG_OBJ_P(getThis());
	XConfigNode node = getNodeFromZVal(obj->xconfig, *z_key, true);
	object_init_ex(return_value, xconfignode_ce);

	xconfignode_object *node_obj = Z_XCONFIGNODE_OBJ_P(return_value);
	node_obj->xconfig = obj->xconfig;
	node_obj->xconfignode = node;
}

PHP_METHOD(XConfig, escapeString)
{
	zval *z_key;

	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "z", &z_key) == FAILURE) {
		RETURN_NULL();
	}
	xconfig_object *obj = Z_XCONFIG_OBJ_P(getThis());
	XConfigNode node = getNodeFromZVal(obj->xconfig, *z_key);
	if (node) {
		object_init_ex(return_value, xconfignode_ce);

	    xconfignode_object *node_obj = Z_XCONFIGNODE_OBJ_P(return_value);
		node_obj->xconfig = obj->xconfig;
		node_obj->xconfignode = node;
	} else {
		zend_throw_exception_ex(xconfig_notfoundexception_ce, 0 TSRMLS_CC, (char*)"Key not found");	
	}
}

PHP_METHOD(XConfigNode, exists)
{
	xconfignode_object *obj = Z_XCONFIGNODE_OBJ_P(getThis());
	const XConfigNode& node = obj->xconfignode;

	RETURN_BOOL((bool) node);
}

PHP_METHOD(XConfigNode, getParent)
{
	xconfignode_object *obj = Z_XCONFIGNODE_OBJ_P(getThis());
	const XConfigNode& node = obj->xconfignode;
	XConfig* xc = obj->xconfig;

	object_init_ex(return_value, xconfignode_ce);
	xconfignode_object *new_obj = Z_XCONFIGNODE_OBJ_P(return_value);
	new_obj->xconfig = obj->xconfig;
	new_obj->xconfignode = xc->getParent(node);
}

PHP_METHOD(XConfigNode, getChildren)
{
	xconfignode_object *obj = Z_XCONFIGNODE_OBJ_P(getThis());
	const XConfigNode& node = obj->xconfignode;
	XConfig* xc = obj->xconfig;

	vector<XConfigNode> children = xc->getChildren(node);
	array_init(return_value);
	for (vector<XConfigNode>::const_iterator it = children.begin(); it != children.end(); ++it) {
		zval z_node;
		object_init_ex(&z_node, xconfignode_ce);
	    xconfignode_object *new_obj = Z_XCONFIGNODE_OBJ_P(&z_node);
		new_obj->xconfig = obj->xconfig;
		new_obj->xconfignode = *it;
		add_next_index_zval(return_value, &z_node);
	}
}

PHP_METHOD(XConfigNode, getName)
{
	xconfignode_object *obj = Z_XCONFIGNODE_OBJ_P(getThis());
	const XConfigNode& node = obj->xconfignode;
	XConfig* xc = obj->xconfig;

	string ret(xc->getName(node));
	RETURN_STRINGL(ret.c_str(), ret.length());
}

#if PHP_VERSION_ID < 50399
function_entry xconfig_methods[] = {
#else
zend_function_entry xconfig_methods[] = {
#endif
	PHP_ME(XConfig, __construct, NULL, ZEND_ACC_PUBLIC | ZEND_ACC_CTOR)
	PHP_ME(XConfig, close, NULL, ZEND_ACC_PUBLIC)
	PHP_ME(XConfig, reload, NULL, ZEND_ACC_PUBLIC)
	PHP_ME(XConfig, exists, NULL, ZEND_ACC_PUBLIC)
	PHP_ME(XConfig, getType, NULL, ZEND_ACC_PUBLIC)
	PHP_ME(XConfig, getMtime, NULL, ZEND_ACC_PUBLIC)
	PHP_ME(XConfig, getValue, NULL, ZEND_ACC_PUBLIC)
	PHP_ME(XConfig, isScalar, NULL, ZEND_ACC_PUBLIC)
	PHP_ME(XConfig, isMap, NULL, ZEND_ACC_PUBLIC)
	PHP_ME(XConfig, isSequence, NULL, ZEND_ACC_PUBLIC)
	PHP_ME(XConfig, getCount, NULL, ZEND_ACC_PUBLIC)
	PHP_ME(XConfig, getMapKeys, NULL, ZEND_ACC_PUBLIC)
	PHP_ME(XConfig, getNode, NULL, ZEND_ACC_PUBLIC)
	PHP_ME(XConfig, getNodeNoThrow, NULL, ZEND_ACC_PUBLIC)
	PHP_ME(XConfig, escapeString, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_STATIC)
	{NULL, NULL, NULL}
};

zend_function_entry xconfignode_methods[] = {
	PHP_ME(XConfigNode, exists, NULL, ZEND_ACC_PUBLIC)
	PHP_ME(XConfigNode, getParent, NULL, ZEND_ACC_PUBLIC)
	PHP_ME(XConfigNode, getChildren, NULL, ZEND_ACC_PUBLIC)
	PHP_ME(XConfigNode, getName, NULL, ZEND_ACC_PUBLIC)
	{NULL, NULL, NULL}
};

PHP_MINIT_FUNCTION(xconfig);
PHP_MSHUTDOWN_FUNCTION(xconfig);
 
// the following code creates an entry for the module and registers it with Zend.
zend_module_entry xconfig_module_entry = {
    STANDARD_MODULE_HEADER,
    PHP_XCONFIG_EXTNAME,
    NULL, // functions
	PHP_MINIT(xconfig),
	PHP_MSHUTDOWN(xconfig),
    NULL, // name of the RINIT function or NULL if not applicable
    NULL, // name of the RSHUTDOWN function or NULL if not applicable
    NULL, // name of the MINFO function or NULL if not applicable
    PHP_XCONFIG_VERSION,
    STANDARD_MODULE_PROPERTIES
};
 
extern "C" {
ZEND_GET_MODULE(xconfig)
}

static void reset_pool() {
	xconfig_pool = 0;
}
 
PHP_MINIT_FUNCTION(xconfig)
{
	zend_class_entry ce;
	INIT_CLASS_ENTRY(ce, "XConfig", xconfig_methods);
	xconfig_ce = zend_register_internal_class(&ce TSRMLS_CC);
	xconfig_ce->create_object = xconfig_create_handler;
	memcpy(&xconfig_object_handlers, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
	xconfig_object_handlers.clone_obj = NULL;

	zend_declare_class_constant_string(xconfig_ce, CONSTANT_TYPE_DEFAULT_SOCKET, sizeof(CONSTANT_TYPE_DEFAULT_SOCKET)-1,
		UnixConnection::DEFAULT_SOCKET TSRMLS_CC);
	zend_declare_class_constant_long(xconfig_ce, CONSTANT_TYPE_NULL, sizeof(CONSTANT_TYPE_NULL)-1, xconfig::TYPE_NULL TSRMLS_CC);
	zend_declare_class_constant_long(xconfig_ce, CONSTANT_TYPE_STRING, sizeof(CONSTANT_TYPE_STRING)-1, xconfig::TYPE_STRING TSRMLS_CC);
	zend_declare_class_constant_long(xconfig_ce, CONSTANT_TYPE_BOOLEAN, sizeof(CONSTANT_TYPE_BOOLEAN)-1, xconfig::TYPE_BOOLEAN TSRMLS_CC);
	zend_declare_class_constant_long(xconfig_ce, CONSTANT_TYPE_INTEGER, sizeof(CONSTANT_TYPE_INTEGER)-1, xconfig::TYPE_INTEGER TSRMLS_CC);
	zend_declare_class_constant_long(xconfig_ce, CONSTANT_TYPE_FLOAT, sizeof(CONSTANT_TYPE_FLOAT)-1, xconfig::TYPE_FLOAT TSRMLS_CC);
	zend_declare_class_constant_long(xconfig_ce, CONSTANT_TYPE_MAP, sizeof(CONSTANT_TYPE_MAP)-1, xconfig::TYPE_MAP TSRMLS_CC);
	zend_declare_class_constant_long(xconfig_ce, CONSTANT_TYPE_SEQUENCE, sizeof(CONSTANT_TYPE_SEQUENCE)-1, xconfig::TYPE_SEQUENCE TSRMLS_CC);

	INIT_CLASS_ENTRY(ce, "XConfigNode", xconfignode_methods);
	xconfignode_ce = zend_register_internal_class(&ce TSRMLS_CC);
	xconfignode_ce->create_object = xconfignode_create_handler;
	memcpy(&xconfignode_object_handlers, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
	xconfignode_object_handlers.clone_obj = NULL;

	INIT_CLASS_ENTRY(ce, "XConfigException", NULL);
	xconfig_exception_ce = zend_register_internal_class_ex(&ce, zend_exception_get_default(TSRMLS_C));

	INIT_CLASS_ENTRY(ce, "XConfigNotFoundException", NULL);
	xconfig_notfoundexception_ce = zend_register_internal_class_ex(&ce, xconfig_exception_ce);

	INIT_CLASS_ENTRY(ce, "XConfigWrongTypeException", NULL);
	xconfig_wrongtypeexception_ce = zend_register_internal_class_ex(&ce, xconfig_exception_ce);

	INIT_CLASS_ENTRY(ce, "XConfigNotConnectedException", NULL);
	xconfig_notconnectedxception_ce = zend_register_internal_class_ex(&ce, xconfig_exception_ce);

	xconfig_pool = 0;

	// reset pool on child after fork
	pthread_atfork(NULL, NULL, &reset_pool);

	return SUCCESS;
}

PHP_MSHUTDOWN_FUNCTION(xconfig)
{
	if (xconfig_pool) {
		delete xconfig_pool;
		xconfig_pool = 0;
	}

	return SUCCESS;
}
